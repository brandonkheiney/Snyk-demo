#!/usr/bin/env python
# coding: utf-8

# In[230]:


#Brandon Heiney 10/13/2024
class RC4:
    def __init__(self):
        self.i = 0
        self.j = 0
        self.plaintxt = ''
        self.ciphertext = '' 
        self.cipherlst = []
        self.plainlst = []

        #S[]
        self.graph = [0x08,0xa5,0xe9,0x09,0x45,0xc0,0xed,0xf1,
                      0x5d,0xfd,0x34,0xc3,0x4e,0x7b,0x9d,0x96,
                      0x38,0x76,0x7c,0x49,0x8f,0xd9,0x35,0xcc,
                      0x99,0xb0,0x2d,0x97,0xe7,0x1d,0xa9,0x16,
                      0x7d,0x10,0x8c,0x89,0x51,0xa1,0xd7,0x5b,
                      0x3d,0x1c,0x23,0x1e,0xe0,0xb2,0x84,0xa8,
                      0xc5,0x24,0x86,0xb9,0x07,0xac,0xf0,0x52,
                      0x32,0x92,0xda,0x06,0xe4,0xd4,0x82,0xd5,
                      0xdb,0xae,0x04,0x4c,0x36,0xc6,0x19,0x2e,
                      0xb4,0x2c,0x69,0xc7,0xce,0x71,0x91,0xa6,
                      0xde,0x22,0x59,0xf4,0x54,0x25,0x42,0x0d,
                      0xff,0x03,0x0a,0x44,0x87,0x37,0x8e,0x12,
                      0x30,0x33,0x58,0x3a,0x81,0xf3,0x8d,0x9f,
                      0xbd,0xc4,0x95,0x73,0x93,0x55,0x41,0xb6,
                      0x90,0x63,0x9c,0x18,0x77,0xdd,0xe3,0xc9,
                      0x8a,0xb1,0x7f,0xee,0xe5,0xad,0x05,0xa0,
                      #128...255
                      0x6d,0x15,0xc2,0xab,0x7a,0xa4,0x3f,0x00,
                      0x48,0xa3,0xd1,0x4a,0x75,0xb7,0x85,0xd8,
                      0xfb,0xfe,0xf2,0xe6,0x13,0x56,0xec,0xa7,
                      0x9a,0xe2,0x64,0x53,0x5f,0x65,0xd3,0xc8,
                      0x68,0x74,0x02,0xdc,0x6f,0x43,0xe1,0x8b,
                      0xbf,0xa2,0x2a,0x80,0xbb,0x6a,0x28,0x78,
                      0x17,0xf6,0xfc,0x67,0xb3,0x9e,0xcb,0x31,
                      0xf9,0xaa,0x9b,0x2b,0xb8,0x1a,0x3e,0xf8,
                      0xd2,0x5c,0x20,0x11,0x4b,0x3b,0x0b,0x6e,
                      0xaf,0xca,0x6b,0x60,0x94,0x5a,0x61,0x27,
                      0xb5,0x7e,0x4d,0xbe,0x57,0x26,0xcf,0xef,
                      0xbc,0x40,0x72,0x14,0x83,0x47,0xf7,0x1b,
                      0x79,0x50,0x1f,0x3c,0x5e,0x0f,0xf5,0x62,
                      0x6c,0x21,0x70,0x4f,0xeb,0xea,0x98,0xfa,
                      0xba,0x46,0x01,0xcd,0x88,0x0e,0x39,0xc1,
                      0xd0,0xdf,0x2f,0x0c,0x29,0x66,0xd6,0xe8
                    ]
    #menu to select options
    def Menu(self):
        while True:
            self.cipherlst = []
            self.plainlst = []
            print('Welcome')
            print('[1] Encrypt')
            print('[2] Decrypt')
            print('[3] Exit')
            option = input('\nInput number to select menu option: ')
        
            if option == '1':
                self.Encrypt()
            elif option == '2':
                self.Decrypt()
            elif option == '3':
                print('Goodbye!')
                break
            else:
                print('Error, Invalid Response!\n')
    #encrypts given i, j, and plaintext values
    def Encrypt(self):
        self.i = int(input('Enter i value: '))
        self.j = int(input('Enter j value: '))
        self.plaintxt = input('Enter given plaintext: ')
        for i in self.plaintxt:
            self.i = ((self.i+1)%256)
            self.j = ((self.j+self.graph[self.i])%256)
            self.t = ((self.graph[self.i] + self.graph[self.j])%256)
            self.t = (self.graph[self.t])
            self.enXOR(int(self.t), ord(i))
        print(f'Your ciphertext stream: {self.cipherlst} \n')       
    #decrypts given i, j and ciphertxt values       
    def Decrypt(self):
        self.i = int(input('Enter i value: '))
        self.j = int(input('Enter j value: '))
        while True:
            self.ciphertxt = input('Enter ciphertext incrementally, type "Done" when finished (must be in Hex): ')
            if self.ciphertxt == 'Done':
                break
            self.cipherlst.append(self.ciphertxt)
        self.cipherlst = [int(i, 16) for i in self.cipherlst]
        for i in self.cipherlst:
            self.i = ((self.i+1)%256)
            self.j = ((self.j+self.graph[self.i])%256)
            self.t = ((self.graph[self.i] + self.graph[self.j])%256)
            self.t = (self.graph[self.t])
            self.deXOR(int(self.t), int(i))
        print(f'Your plaintext stream: {self.plainlst} \n') 
    #XOR function for decryption    
    def deXOR(self,a,b):
        self.y= a ^ b
        self.plainlst.append(chr(self.y))
            
    #XOR function for encryption        
    def enXOR(self,a,b):
        self.y= a ^ b
        self.cipherlst.append(hex(self.y))


g = RC4()
g.Menu()



